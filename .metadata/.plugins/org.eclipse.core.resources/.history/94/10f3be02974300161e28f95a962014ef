package com.gui;

public class waitFinishAppAndHistServicesDeploy implements Runnable {
	waitFinishAppAndHistServicesDeploy(Thread server1,Thread server2, Thread server3,String pdcIP, String appIP,String histIP, String userName,String password, String publicKeyPath){
		this.server1=server1;
		this.server2=server2;
		this.appIP=appIP;
		this.userName=userName;
		this.password=password;
	
		this.server3=server3;
		this.pdcIP=pdcIP;
		this.histIP=histIP;
		this.publicKeyPath=publicKeyPath;
	}
	
	Thread server1;
	Thread server2;
	Thread server3;
	String pdcIP;
	String appIP;
	String histIP;
	String userName;
	String password;
	String serverType;
	String publicKeyPath;
	
	@Override
	public void run() {
		// TODO Auto-generated method stub
		String StartAppServer= "sudo service phasorpoint-appserver start";
		String StartPDCServer= "sudo service phasorpoint-pdc start";
		String StartHistServer= "sudo service phasorpoint-historian start";
		while (true){
			if (server1.isAlive()==false && server2.isAlive()==false && server3.isAlive()==false ){
			ExecuteCommandViaSSH pdcStart=new ExecuteCommandViaSSH(pdcIP, userName,publicKeyPath, password , "pdc");
			pdcStart.CreateConnection();
			pdcStart.StartCommand(StartPDCServer);
			pdcStart.CloseConnection();
			
			ExecuteCommandViaSSH appStart=new ExecuteCommandViaSSH(appIP, userName,publicKeyPath,password , "app");
			appStart.CreateConnection();
			appStart.StartCommand(StartAppServer);
			appStart.CloseConnection();
			
			ExecuteCommandViaSSH histStart=new ExecuteCommandViaSSH(histIP, userName,publicKeyPath ,password, "hist");
			histStart.CreateConnection();
			histStart.StartCommand(StartHistServer);
			histStart.CloseConnection();
			
			try {
				Thread.sleep(60000);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			//Get PDC service status
			ExecuteCommandViaSSH pdcStartCheck=new ExecuteCommandViaSSH(pdcIP, userName,publicKeyPath, password , "pdc");
			pdcStartCheck.CreateConnection();
			String responsePDC=pdcStartCheck.StartCommandAndReturnResult("sudo service phasorpoint-pdc status");
			pdcStartCheck.CloseConnection();
			
			//Get AppServer service status
			ExecuteCommandViaSSH appStartCheck=new ExecuteCommandViaSSH(appIP, userName,publicKeyPath,password , "app");
			appStartCheck.CreateConnection();
			String responseAppServer=appStartCheck.StartCommandAndReturnResult("sudo service phasorpoint-appserver status");
			appStartCheck.CloseConnection();
			
			//Get Historian service status
			ExecuteCommandViaSSH histStartCheck=new ExecuteCommandViaSSH(histIP, userName,publicKeyPath ,password, "hist");
			histStartCheck.CreateConnection();
			String responseHistorianr=histStartCheck.StartCommandAndReturnResult("sudo service phasorpoint-historian status");
			histStartCheck.CloseConnection();
			
			//Verify if services are running
			if (responsePDC.contains(" is running"))
			
			MainWindow.showInfoMessage("URTDSM servises were installed and started.\nPlease enjoy!\n "+response);
			break;
			}
			
		}
		
}
}