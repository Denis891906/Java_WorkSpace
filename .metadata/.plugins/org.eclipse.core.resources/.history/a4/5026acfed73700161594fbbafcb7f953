package com;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import com.ExecuteCommandViaSSH;
import com.Find;
import com.GUI;
import com.deployService;

public class Engine implements ActionListener{

	GUI parent;
	String pdcBuildPath=null;
	String appServerBuildPath=null;
	String historianBuildPath=null;
	String keyPath;
		
	//Commands which should be executed to remove PDC service and pdc rmp file
	String[] pdcRemoveCommands={
			"sudo rpm -e phasorpoint-pdc",
			"sudo rm -r *pdc*"
	};
	
	//Commands which should be executed to remove AppServer service and pdc rmp file
	String[] appServerRemoveCommands={
			"sudo rpm -e phasorpoint-appserver",
			"sudo rm -r *appserver*"
	};
	
	//Commands which should be executed to remove Historian service and pdc rmp file
	String[] histRemoveCommands={
			"sudo rpm -e phasorpoint-historian",
			"sudo rm -r *historian*"
	};
	
	
	Engine(GUI parent){
		 this.parent = parent;
		 }
	
	public void componentResized(ComponentEvent e) {
        parent.pack();          
    }
	
	public void actionPerformed (ActionEvent e){
		Object src=e.getSource();
		JButton clickedButton=null;
		
		if (src instanceof JButton){
			clickedButton=(JButton) src;
		}
		
		if (clickedButton.getText()=="Install PDC, AppServer, Historian"){
			//Verifications that all data were entered.
			if(parent.GetInternalPDCIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal PDC IP.");
			}else if(parent.GetInternalAppServerIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal AppServer IP.");
			}else if(parent.GetInternalHistorianIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal Historian IP.");
			}else if(parent.GetBuildPath().toString().isEmpty()){
				parent.ShowWarningDialog("Please select folder with URTDSM build.");
			}else if(parent.getSudoPassword().toString().isEmpty()){
				parent.ShowWarningDialog("Please enter 'sudo' password for VM's.");
			}else if(parent.getUserName().toString().isEmpty()){
				parent.ShowWarningDialog("Please enter user name.");
			}else{
				//Clear text areases
				parent.clearTextAreas();
				//Commands which should be executed to install PDC service
				String[] pdcCommands={
						
						"sudo rpm -i *pdc*",
						"sudo /opt/phasorpoint-pdc/bin/createdb -u postgres -p P0stgres -d"
						
						
				};
				
				//Commands which should be executed to install AppServer service	
				String [] appServerCommands={
						"sudo rpm -i *appserver*",
						"sudo sh -c \"echo 'infrastructure.input.addresses="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\"",
						"sudo sh -c \"echo 'naming.strategy=urtdsm' >> /etc/phasorpoint-appserver/appserver.properties\"",
						"sudo sh -c \"echo 'pdc.1.host="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\"",
						"sudo sh -c \"echo 'db.1.host="+parent.GetInternalHistorianIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\""
						
				};
				
				//Commands which should be executed to install Historian service
				String [] historainCommands={
						
						"sudo rpm -i *historian*",			
						"sudo /opt/phasorpoint-historian/bin/createdb -u postgres -p P0stgres -d",
						"sudo sed -i.bak \"s/#listen_addresses = 'localhost'/listen_addresses = '*'/\" /var/lib/pgsql/9.4/data/postgresql.conf",
						"sudo sh -c \"echo 'host all all "+parent.GetInternalAppServerIP().toString()+"/32 md5' >> /var/lib/pgsql/9.4/data/pg_hba.conf\"",
						"sudo service postgresql-9.4 restart",
						"sudo sh -c \"echo  'infrastructure.input.addresses="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-historian/historian.properties\"",
						"sudo sh -c \"echo 'appserver.1.host="+parent.GetInternalAppServerIP().toString()+"' >> /etc/phasorpoint-historian/historian.properties\"",
						"sudo sh -c \"echo 'repository.dir=/var/phasorpoint-historian/data' >> /etc/phasorpoint-historian/historian.properties\"",
						"sudo sh -c \"echo 'summary.repository.dir=/var/phasorpoint-historian/summary' >> /etc/phasorpoint-historian/historian.properties\"",
						"sudo sh -c \"echo 'repository.size.limit=100000' >> /etc/phasorpoint-historian/historian.properties\"",
						"sudo sh -c \"echo 'summary.size.limit=50' >> /etc/phasorpoint-historian/historian.properties\""
						
				};	
				
						
			
			//PDC Installation
			System.out.println("Installetion process for PDC with external IP "+parent.GetInternalPDCIP());	
			Thread pdcInstall=new Thread(new deployService(parent.GetInternalPDCIP(), parent.getUserName(), parent.getSudoPassword() ,pdcBuildPath,"pdc" ,pdcCommands));
			pdcInstall.start();
			
			//AppServer Installation
			System.out.println("Installetion process for AppServer with external IP "+parent.GetInternalAppServerIP());	
			Thread appServerInstall=new Thread(new deployService(parent.GetInternalAppServerIP(), parent.getUserName(), parent.getSudoPassword(),  appServerBuildPath,"app",appServerCommands));
			appServerInstall.start();
			
			//Historian Installation
			System.out.println("Installetion process for Historian with external IP "+parent.GetInternalHistorianIP());	
			Thread histServerInstall=new Thread(new deployService(parent.GetInternalHistorianIP(), parent.getUserName(), parent.getSudoPassword(), historianBuildPath,"hist",historainCommands));
			histServerInstall.start();
			
			Thread startAllServices=new Thread(new waitFinishAppAndHistServicesDeploy(pdcInstall, appServerInstall, histServerInstall, parent.GetInternalPDCIP(), parent.GetInternalAppServerIP(), parent.GetInternalHistorianIP(), parent.getUserName(), parent.getSudoPassword()));
			startAllServices.start();
			
					
			parent.pack();
			}
		}else if (clickedButton.getText()=="Reinstall Three Services"){
			
			//Verifications that all data were entered.
			if(parent.GetInternalPDCIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal PDC IP.");
			}else if(parent.GetInternalAppServerIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal AppServer IP.");
			}else if(parent.GetInternalHistorianIP().toString().isEmpty()){
				parent.ShowWarningDialog("Please eneter Internal Historian IP.");
			}else if(parent.GetBuildPath().toString().isEmpty()){
				parent.ShowWarningDialog("Please select folder with URTDSM build.");
			}else if(parent.getSudoPassword().toString().isEmpty()){
				parent.ShowWarningDialog("Please enter 'sudo' password for VM's.");
			}else if(parent.getUserName().toString().isEmpty()){
				parent.ShowWarningDialog("Please enter user name.");
			}else{
			
			parent.clearTextAreas();
			
			//Commands which should be executed to install PDC service
			String[] pdcCommands={
					
					"sudo rpm -i *pdc*",
					"sudo /opt/phasorpoint-pdc/bin/createdb -u postgres -p P0stgres -d"
					
					
					
			};
			
			//Commands which should be executed to install AppServer service	
			String [] appServerCommands={
					
					"sudo rpm -i *appserver*",
					"sudo sh -c \"echo 'infrastructure.input.addresses="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\"",
					"sudo sh -c \"echo 'naming.strategy=urtdsm' >> /etc/phasorpoint-appserver/appserver.properties\"",
					"sudo sh -c \"echo 'pdc.1.host="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\"",
					"sudo sh -c \"echo 'db.1.host="+parent.GetInternalHistorianIP().toString()+"' >> /etc/phasorpoint-appserver/appserver.properties\""
					
			};
			
			//Commands which should be executed to install Historian service
			String [] historainCommands={
					
					"sudo rpm -i *historian*",			
					"sudo /opt/phasorpoint-historian/bin/createdb -u postgres -p P0stgres -d",
					"sudo sed -i.bak \"s/#listen_addresses = 'localhost'/listen_addresses = '*'/\" /var/lib/pgsql/9.4/data/postgresql.conf",
					"sudo sh -c \"echo 'host all all "+parent.GetInternalAppServerIP().toString()+"/32 md5' >> /var/lib/pgsql/9.4/data/pg_hba.conf\"",
					"sudo service postgresql-9.4 restart",
					"sudo sh -c \"echo  'infrastructure.input.addresses="+parent.GetInternalPDCIP().toString()+"' >> /etc/phasorpoint-historian/historian.properties\"",
					"sudo sh -c \"echo 'appserver.1.host="+parent.GetInternalAppServerIP().toString()+"' >> /etc/phasorpoint-historian/historian.properties\"",
					"sudo sh -c \"echo 'repository.dir=/var/phasorpoint-historian/data' >> /etc/phasorpoint-historian/historian.properties\"",
					"sudo sh -c \"echo 'summary.repository.dir=/var/phasorpoint-historian/summary' >> /etc/phasorpoint-historian/historian.properties\"",
					"sudo sh -c \"echo 'repository.size.limit=100000' >> /etc/phasorpoint-historian/historian.properties\"",
					"sudo sh -c \"echo 'summary.size.limit=50' >> /etc/phasorpoint-historian/historian.properties\""
					
			};	
			
			//Execute remove commands in the PDC VM
			ExecuteCommandViaSSH pdcRemove=new ExecuteCommandViaSSH(parent.GetInternalPDCIP(), parent.getUserName(), parent.getSudoPassword(), "pdc");
			pdcRemove.CreateConnection();
			pdcRemove.StartCommand(pdcRemoveCommands);
			pdcRemove.CloseConnection();
			
			//PDC Installation
			System.out.println("Installetion process for PDC with external IP "+parent.GetInternalPDCIP());	
			Thread pdcInstall=new Thread(new deployService(parent.GetInternalPDCIP(), parent.getUserName(), parent.getSudoPassword() ,pdcBuildPath,"pdc" ,pdcCommands));
			pdcInstall.start();
						
			
			//Execute remove commands in the AppServer VM
			ExecuteCommandViaSSH appRemove=new ExecuteCommandViaSSH(parent.GetInternalAppServerIP(), parent.getUserName(),parent.getSudoPassword(), "app");
			appRemove.CreateConnection();
			appRemove.StartCommand(appServerRemoveCommands);
			appRemove.CloseConnection();
			
			//AppServer Installation
			System.out.println("Installetion process for AppServer with external IP "+parent.GetInternalAppServerIP());	
			Thread appServerInstall=new Thread(new deployService(parent.GetInternalAppServerIP(), parent.getUserName(), parent.getSudoPassword(), appServerBuildPath,"app",appServerCommands));
			appServerInstall.start();
			
			//Execute remove commands in the Historian VM
			ExecuteCommandViaSSH histRemove=new ExecuteCommandViaSSH(parent.GetInternalHistorianIP(), parent.getUserName(),  parent.getSudoPassword(), "hist");
			histRemove.CreateConnection();
			histRemove.StartCommand(histRemoveCommands);
			histRemove.CloseConnection();
					
			//Historian Installation
			System.out.println("Installetion process for Historian with external IP "+parent.GetInternalHistorianIP());	
			Thread histServerInstall=new Thread(new deployService(parent.GetInternalHistorianIP(), parent.getUserName(), parent.getSudoPassword(),  historianBuildPath,"hist",historainCommands));
			histServerInstall.start();
			
			Thread startAllServices=new Thread(new waitFinishAppAndHistServicesDeploy(pdcInstall, appServerInstall, histServerInstall, parent.GetInternalPDCIP(), parent.GetInternalAppServerIP(), parent.GetInternalHistorianIP(), parent.getUserName(), parent.getSudoPassword()));
			startAllServices.start();
			
			
			}
			
		}else if(clickedButton.getText()=="Select Build Folder"){
			
			JFileChooser chooser;	         
		    chooser = new JFileChooser(); 
		    chooser.setCurrentDirectory(new java.io.File("."));
		    chooser.setDialogTitle("Dialog");
		    chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		    
		    //
		    // disable the "All files" option.
		    //
		    chooser.setAcceptAllFileFilterUsed(false);
		    //    
		    if (chooser.showOpenDialog(parent) == JFileChooser.APPROVE_OPTION) { 
		      System.out.println("getCurrentDirectory(): " 
		         +  chooser.getCurrentDirectory());
		      System.out.println("getSelectedFile() : " 
		         +  chooser.getSelectedFile());
		      Path directPath= Paths.get(chooser.getSelectedFile().getAbsolutePath());
		      
		      
		      Find temp=new Find();
		      
		      System.out.println("Returned: " + temp.returnFilePath(directPath,"*pdc*").toString());
		      
		      if ((temp.returnFilePath(directPath,"*pdc*").toString()).matches("NONE") ){
		    	  parent.ShowWarningDialog("PDC install rpm file wasn't found in the directory "+directPath + " . \nPlease specify directory again.");
		      }else if((temp.returnFilePath(directPath,"*app*").toString()).matches("NONE") ){
		    	  parent.ShowWarningDialog("AppServer install rpm file wasn't found in the directory "+directPath + " . \nPlease specify directory again.");
		      }else if((temp.returnFilePath(directPath,"*hist*").toString()).matches("NONE")){
		    	  parent.ShowWarningDialog("Historian install rpm file wasn't found in the directory "+directPath + " . \nPlease specify directory again.");
		    	  }else if(chooser.getSelectedFile().toString().length()>61 ){
		    		  parent.SetBuildPath("..."+chooser.getSelectedFile().getName().toString(),
			    			  temp.returnFilePath(directPath,"*pdc*").toString(),
			    			  temp.returnFilePath(directPath,"*app*").toString(),
			    			  temp.returnFilePath(directPath,"*hist*").toString()
			    			  );
		    		  pdcBuildPath= chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*pdc*").toString() ;
			    	  appServerBuildPath=chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*app*").toString();
			    	  historianBuildPath=chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*hist*").toString();
			    	  
		    	  }
		      else {
		    	  parent.SetBuildPath(chooser.getSelectedFile().getAbsolutePath(),
		    			  temp.returnFilePath(directPath,"*pdc*").toString(),
		    			  temp.returnFilePath(directPath,"*app*").toString(),
		    			  temp.returnFilePath(directPath,"*hist*").toString()
		    			  );
		    	  pdcBuildPath= chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*pdc*").toString() ;
		    	  appServerBuildPath=chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*app*").toString();
		    	  historianBuildPath=chooser.getSelectedFile().getAbsolutePath()+"\\" + temp.returnFilePath(directPath,"*hist*").toString();
		    	  
		      }
		      
		      
		      }
		    else {
		      System.out.println("No Selection ");
		      }
		    //parent.pack();
		
		}else if(clickedButton.getText()=="Open Internet Expolorer"){
			try {
				Runtime.getRuntime().exec("C:\\Program Files\\Internet Explorer\\iexplore.exe \"https://"+parent.GetInternalPDCIP()+":24721\"");
			} catch (IOException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}
		
		
		
		
		
	}
	
}
