package com.gui;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.PrintStream;
import java.nio.file.Path;
import java.text.AttributedCharacterIterator;
import java.awt.event.ActionEvent;


import javax.swing.*;
import javax.swing.GroupLayout.Alignment;

public class MainWindow extends JFrame{
	public JLabel buildPathLable;
	public JLabel keyPathLable;
	public JLabel buildPDCPathLable1;
	public JLabel buildPDCPathLable2;
	public JLabel buildAppServerPathLable1;
	public JLabel buildAppServerPathLable2;
	public JLabel buildHistoranPathLable1;
	public JLabel buildHistoranPathLable2;
	private JTextField pdcIPText;
	private JTextArea textArea;
	
	
	
	
	
	public MainWindow(){
		
		
		setSize(700, 1000);
		
		GridBagLayout gridbag = new GridBagLayout();
        GridBagConstraints c = new GridBagConstraints();
        getContentPane().setLayout(gridbag);
        
        
        
        
              
        
        JLabel pdcIPLable=new JLabel("1 IP");  
        pdcIPLable.setHorizontalAlignment(SwingConstants.LEFT);
        JLabel appIPLable=new JLabel("2 IP");
        appIPLable.setHorizontalAlignment(SwingConstants.LEFT);
        JLabel histIPLable=new JLabel("3 IP");
        histIPLable.setHorizontalAlignment(SwingConstants.LEFT);
        buildPathLable=new JLabel();
        keyPathLable=new JLabel();
        buildPDCPathLable1 = new JLabel();
        buildPDCPathLable2 = new JLabel();
        buildAppServerPathLable1 = new JLabel();
    	buildAppServerPathLable2 = new JLabel();
    	buildHistoranPathLable1 = new JLabel();
    	buildHistoranPathLable2 = new JLabel();
        
        
        pdcIPText=new JTextField(16);
        pdcIPText.setText("10.35.204.56");
        JTextField appIPText=new JTextField(16);
        JTextField histIPText=new JTextField(16);

        
        JButton pdcInstallButton=new JButton("Install 1");
        JButton appInstallButton=new JButton("Install 2");
        JButton histInstallButton=new JButton("Install 3");
        JButton selectBuildFolderButton=new JButton("Select Build Folder");
        JButton selectKeyFileButton=new JButton("Select Key File");
        
        
        
        
        
        
        
        
        //
        
        textArea = new JTextArea();
        textArea.setEditable(false);
        PrintStream printStream = new PrintStream(new CustomOutputStream(textArea));
         
        // keeps reference of standard output stream
        
         
        // re-assigns standard output stream and error output stream
        System.setOut(printStream);
        System.setErr(printStream);
        
        
        
        
        //Add listener for button selectBuildFolder
        
        GUIEngine guiEngine=new GUIEngine(this);
        
        selectBuildFolderButton.addActionListener(guiEngine);
        pdcInstallButton.addActionListener(guiEngine);
        selectKeyFileButton.addActionListener(guiEngine);
        
      
        
        
        //Line with PDC elements
        c.gridy=0; //line
        c.gridx=0; //column
        c.gridwidth=1;//сколько клеток занимает элемент в ширину
        c.gridheight=1;//сколько клеток занимает элемент в высоту
        c.weightx=0;// как будет происходить растяжка компонента по Х
        c.weighty=0;// как будет происходить растяжка компонента по Y
        c.anchor=GridBagConstraints.BASELINE_LEADING; // где элемент будет располагаться
        //c.fill=GridBagConstraints.HORIZONTAL; //как будет располагаться элемент
        c.insets=new Insets(0, 0, 0, 0); // отступы компонентов ( top,left, bottom, right )
        c.ipadx=1; // на сколько увеличиваеться минимальная ширина элемента
        c.ipady=1; // на сколько увеличиваеться минимальная высота элемента       
        
        
        
        this.add(pdcIPLable, c);
        
        
        c.gridx=1;
        c.gridwidth=1;
        c.weightx=0;
        this.add(pdcIPText, c);
        
        c.gridx=2;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(1, 200, 0, 0); // отступы компонентов ( top,left, bottom, right )
        this.add(pdcInstallButton, c);
        
        
      //Line with AppServer elements
        c.insets=new Insets(0, 0, 0, 0); // отступы компонентов ( top,left, bottom, right )
        c.fill=GridBagConstraints.NONE;
        c.gridx=0;
        c.gridy=1;
        this.add(appIPLable, c);
        c.gridx=1;
        this.add(appIPText, c);
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(1, 200, 0, 0); // отступы компонентов ( top,left, bottom, right )
        c.gridx=2;
        this.add(appInstallButton, c);
        
        
      //Line with Historian elements
        c.insets=new Insets(0, 0, 0, 0); // отступы компонентов ( top,left, bottom, right )
        c.fill=GridBagConstraints.NONE;
        c.gridy=2;
        c.gridx=0;
        this.add(histIPLable, c);
        c.gridx=1;
        this.add(histIPText, c);
        c.gridx=2;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(1, 200, 0, 0); // отступы компонентов ( top,left, bottom, right )
        this.add(histInstallButton, c);
             
        //Builds path elements
        c.gridx=0;
        c.gridy=3;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.insets=new Insets(0, 0, 0, 0); // отступы компонентов ( top,left, bottom, right )
        this.add(selectBuildFolderButton, c);
        
        c.gridx=1;
        c.gridy=3;
                c.insets=new Insets(0, 0, 0, 0); // отступы компонентов ( top,left, bottom, right )
        c.gridwidth=5;
        c.fill=GridBagConstraints.HORIZONTAL;;
        this.add(buildPathLable, c);   
    	
        c.gridx=0;
        c.gridy=4;
        c.gridwidth=1;
        this.add(buildPDCPathLable1,c);
        
        
        c.gridx=1;
        c.gridy=4;
        c.gridwidth=5;
        this.add(buildPDCPathLable2,c);
        
        c.gridx=0;
        c.gridy=5;
        c.gridwidth=1;
        this.add(buildAppServerPathLable1, c);
        
        c.gridx=1;
        c.gridy=5;
        c.gridwidth=5;
        this.add(buildAppServerPathLable2, c);
    	
        c.gridx=0;
        c.gridy=6;
        c.gridwidth=1;
        this.add(buildHistoranPathLable1, c);
    	
        c.gridx=1;
        c.gridy=6;
        c.gridwidth=5;
        this.add(buildHistoranPathLable2, c);
        
         
      //key path elements       
        c.gridx=0;
        c.gridy=7;
        c.fill=GridBagConstraints.HORIZONTAL;
        c.gridwidth=1;
        this.add(selectKeyFileButton,c);
        
        c.gridx=1;
        c.gridwidth=7;
        this.add(keyPathLable,c);
        
        // text area
       c.gridx=0;
        c.gridy=8;
        c.fill=GridBagConstraints.BOTH;
        c.gridwidth=6;
        c.gridheight=10;//сколько клеток занимает элемент в высоту
        this.add(new JScrollPane(textArea), c);
        
        public void refresh(){
        textArea.update(new Graphics() {
			
			@Override
			public void translate(int x, int y) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setXORMode(Color c1) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setPaintMode() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setFont(Font font) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setColor(Color c) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setClip(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void setClip(Shape clip) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public FontMetrics getFontMetrics(Font f) {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Font getFont() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Color getColor() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Rectangle getClipBounds() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public Shape getClip() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void fillRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void fillRect(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void fillPolygon(int[] xPoints, int[] yPoints, int nPoints) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void fillOval(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void fillArc(int x, int y, int width, int height, int startAngle, int arcAngle) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawString(AttributedCharacterIterator iterator, int x, int y) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawString(String str, int x, int y) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawRoundRect(int x, int y, int width, int height, int arcWidth, int arcHeight) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawPolyline(int[] xPoints, int[] yPoints, int nPoints) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawPolygon(int[] xPoints, int[] yPoints, int nPoints) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawOval(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void drawLine(int x1, int y1, int x2, int y2) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2,
					Color bgcolor, ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean drawImage(Image img, int dx1, int dy1, int dx2, int dy2, int sx1, int sy1, int sx2, int sy2,
					ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean drawImage(Image img, int x, int y, int width, int height, Color bgcolor, ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean drawImage(Image img, int x, int y, int width, int height, ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean drawImage(Image img, int x, int y, Color bgcolor, ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public boolean drawImage(Image img, int x, int y, ImageObserver observer) {
				// TODO Auto-generated method stub
				return false;
			}
			
			@Override
			public void drawArc(int x, int y, int width, int height, int startAngle, int arcAngle) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void dispose() {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public Graphics create() {
				// TODO Auto-generated method stub
				return null;
			}
			
			@Override
			public void copyArea(int x, int y, int width, int height, int dx, int dy) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void clipRect(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
			
			@Override
			public void clearRect(int x, int y, int width, int height) {
				// TODO Auto-generated method stub
				
			}
		});
        }
        
        this.pack(); // delete empty space from window
	}
	public void SetBuildPath(String path, String pdcPath,String appPath,String histPath){
		buildPathLable.setText(path);
		buildPDCPathLable1.setText("PDC rpm file path:");
		buildPDCPathLable2.setText(pdcPath);
		buildAppServerPathLable1.setText("AppServer rpm file path:");
		buildAppServerPathLable2.setText(appPath);
		buildHistoranPathLable1.setText("Historian rpm file path:");
		buildHistoranPathLable2.setText(histPath);
	}
	
	public String GetBuildPath(){
		System.out.println("GetBuildPath method returns path: "+buildPathLable.getText());
		return buildPathLable.getText();
	}
	
	public void SetKeyPath(String path){
		keyPathLable.setText(path);
	}

	public void ShowWarningDialog (String text){
		JOptionPane.showMessageDialog(new JFrame(), text, "Dialog", JOptionPane.ERROR_MESSAGE);
	} 
	
	public String GetPDCIP(){
		return pdcIPText.getText();
	}
   
 
    public static void main(String[] args)
    {
    	MainWindow flt = new MainWindow();
        flt.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        flt.setVisible(true);
    }


}
